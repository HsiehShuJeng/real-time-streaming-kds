import * as cdk from 'aws-cdk-lib';
import { Match, Template } from 'aws-cdk-lib/assertions';
import { Buckets } from '../lib/buckets';
import { GlueDatabase, Lab3Table } from '../lib/metadata';

describe("Tests the creation of the Glue database", () => {
    const app = new cdk.App();
        // WHEN
    const stack = new cdk.Stack(app, 'TestStack');
    const requiredBuckets = new Buckets(stack, 'Required')
    const glueDatabase = new GlueDatabase(stack, 'Glue');
    new Lab3Table(stack, 'Lab3Table', {
        database: glueDatabase.entity,
        bucket: requiredBuckets.taxiTripDataSet
    })
    const template = Template.fromStack(stack);
    test('Checks the number of Glue database', () => {
        const glueDatabaseResources = template.findResources('AWS::Glue::Database');
        let glueDatabaseNumber = 0
        Object.keys(glueDatabaseResources).forEach(key => {
            if (glueDatabaseResources[key].Type === 'AWS::Glue::Database') {
                glueDatabaseNumber++;
            }
        });
        expect(glueDatabaseNumber).toBe(1);
    })
    test('Checks the Glue database', () => {
        // THEN
        template.hasResourceProperties('AWS::Glue::Database', Match.objectEquals({
            "CatalogId": {
              "Ref": "AWS::AccountId"
            },
            "DatabaseInput": {
              "Description": "Database for KDA Application Source and Target Tables",
              "Name": "kinesislab"
            }
          }))
    });
    test('Checks the number of Glue table', () => {
        const glueTableResources = template.findResources('AWS::Glue::Table');
        let glueTableNumber = 0
        Object.keys(glueTableResources).forEach(key => {
            if (glueTableResources[key].Type === 'AWS::Glue::Table') {
                glueTableNumber++;
            }
        });
        expect(glueTableNumber).toBe(1);
    })
    test('Checks the Glue table', () => {
        // THEN
        template.hasResourceProperties('AWS::Glue::Table', Match.objectEquals({
            "CatalogId": {
                "Ref": "AWS::AccountId"
            },
            "DatabaseName": {
                "Ref": "GlueDatabaseCD4C42E8"
            },
            "TableInput": {
                "Description": "nyctaxitrips generated by CDK",
                "Name": "nyctaxitrips",
                "Parameters": {
                    "classification": "parquet",
                    "has_encrypted_data": true
                },
                "StorageDescriptor": {
                    "Columns": [
                        {
                            "Name": "id",
                            "Type": "string"
                        },
                        {
                            "Name": "vendorId",
                            "Type": "int"
                        },
                        {
                            "Name": "pickupDate",
                            "Type": "string"
                        },
                        {
                            "Name": "dropoffDate",
                            "Type": "string"
                        },
                        {
                            "Name": "passengerCount",
                            "Type": "int"
                        },
                        {
                            "Name": "pickupLongitude",
                            "Type": "double"
                        },
                        {
                            "Name": "pickupLatitude",
                            "Type": "double"
                        },
                        {
                            "Name": "dropoffLongitude",
                            "Type": "double"
                        },
                        {
                            "Name": "dropoffLatitude",
                            "Type": "double"
                        },
                        {
                            "Name": "storeAndFwdFlag",
                            "Type": "string"
                        },
                        {
                            "Name": "gcDistance",
                            "Type": "double"
                        },
                        {
                            "Name": "tripDuration",
                            "Type": "int"
                        },
                        {
                            "Name": "googleDistance",
                            "Type": "int"
                        },
                        {
                            "Name": "googleDuration",
                            "Type": "int"
                        },
                        {
                            "Name": "source",
                            "Type": "string"
                        }
                    ],
                    "Compressed": false,
                    "InputFormat": "org.apache.hadoop.hive.ql.io.parquet.MapredParquetInputFormat",
                    "Location": {
                        "Fn::Join": [
                            "",
                            [
                                "s3://",
                                {
                                    "Ref": "RequiredTaxiTripDataSetA5B248A4"
                                },
                                "/nyctaxitrips"
                            ]
                        ]
                    },
                    "OutputFormat": "org.apache.hadoop.hive.ql.io.parquet.MapredParquetOutputFormat",
                    "SerdeInfo": {
                        "SerializationLibrary": "org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe"
                    },
                    "StoredAsSubDirectories": false
                },
                "TableType": "EXTERNAL_TABLE"
            }
        }))
    })
})